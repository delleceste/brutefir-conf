## sudo modprobe snd-aloop

## COEFF 

logic: "cli" { port: 3000; };

##################################################################
##    We need snd-aloop alsa loopback:
##
##### sudo modprobe snd-aloop

##    We need to edit .asoundrc when we want audio applications to 
##    output to brutefir
##
##### /home/giacomo/.asoundrc:
##
## do not let alsa resample!
# pcm.!default {
# type hw
# card 1
# }
##################################################################

######################################################################################
#
#    filter for speaker placement at 112cm from front wall and listener position P6  #
#
######################################################################################

# 2024.11.21
#
# new filter made up of the 801 crossover filter and EQ taming the 60-100 and 300-800 regions
# for both channels
# 801 crossover made with ALL PASS filters (not with Filter linearization)
# correction made with ALL PASS filters at 47.9Hz, right channel only
# 
coeff "c-l" {
# left: crossover only 
	filename: "/home/giacomo/DRC/brutefir-conf/filters/LF.last.1.raw";
	format: "S32_LE";
	attenuation: 8.0;
};

coeff "c-r" {
	filename: "/home/giacomo/DRC/brutefir-conf/filters/RF.last.1.raw";
	format: "S32_LE";
# to compare with drc-oca (VBA)
	attenuation: 8.0; 
};


# I/O modules are used to provide sample input and output for the BruteFIR convolution engine.
# It is entirely up to the I/O module of how to produce input samples or store output samples.
# It could for example read input from a sound card, a file, or simply generate noise from a formula.
#
# In the BruteFIR configuration file, an I/O module is specified in each input and output structure. 
#
#
##  INPUT ## 
input "left_in", "right_in" {
   #
   # leave device configuration in .brutefir_defaults
   #
};

## OUTPUT  ##

output "left_out", "right_out" {
   #
   # leave device configuration in .brutefir_defaults
   #
};

## FILTER DEFAULTS (can be changed at runtime with telnet IP PORT, cfc command) ##

filter "drc_l" {
   from_inputs: "left_in";
   to_outputs: "left_out";
   coeff: "c-l";
};

filter "drc_r" {
   from_inputs: "right_in";
   to_outputs: "right_out";
   coeff: "c-r";
};


